html
  head
    meta(charset='utf-8')
    meta(name='viewport' content='width=device-width, initial-scale=1, shrink-to-fit=no')
    link(rel='stylesheet' href='https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css' integrity='sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh' crossorigin='anonymous')
    title Traditional Cipher
  
  body
    .container
      .card.mt-4
        .card-header
          ul.nav.nav-tabs.card-header-tabs
            li.nav-item
              a.nav-link.active(href='/') Raw input
            li.nav-item
              a.nav-link(href='/file') File input

        .card-body
          form
            .form-group
              label(for='algoritme') Pilih jenis cipher
              select#algoritme.form-control
                option Simple Vigenere Cipher
                option Extended Vigenere Cipher
                option Full Vigenere Cipher
                option Auto-key Vigenere Cipher
                option Super Cipher
                option Playfair Cipher
                option Hill Cipher
                option Affine Cipher
                option Enigma Cipher


            .form-check
              input#encrypt-radio.form-check-input(type='radio' name='radio' value='encrypt' checked='')
              label.form-check-label(for='encrypt-radio')
                | Encrypt

            .form-check
              input#decrypt-radio.form-check-input(type='radio' name='radio' value='decrypt')
              label.form-check-label(for='decrypt-radio')
                | Decrypt 
            
            .form-group.mt-3#plaintext-group
              label(for='plaintext') Plaintext
              textarea#plaintext.form-control(rows='2')
            
            .form-group.mt-3#ciphertext-group
              label(for='ciphertext') Ciphertext
              textarea#ciphertext.form-control(rows='2')
            
            .alert.alert-danger.fade.show(role='alert')
              strong Key is not valid
            
            .form-group
              label(for='key') Key
              textarea#key.form-control(rows='1')

            button.btn.btn-success Process

            .form-group.mt-3#result-group
              label#label-result(for='result-text')
              textarea#result-text.form-control(rows='2')

    script(type='text/javascript').
      var plaintextGroup = document.querySelector("#plaintext-group");
      var ciphertextGroup = document.querySelector("#ciphertext-group");
      var plaintext = document.querySelector("#plaintext");
      var ciphertext = document.querySelector("#ciphertext");
      var key = document.querySelector("#key");
      var resultGroup = document.querySelector("#result-group");
      var labelResult = document.querySelector("#label-result");
      var textResult = document.querySelector("#result-group #result-text");
      var alert = document.querySelector(".alert");

      var isEncrypt = true;

      resultGroup.style.display = "none";
      ciphertextGroup.style.display = "none";
      alert.style.display = "none";
      
      document.querySelector("#encrypt-radio").addEventListener("change", function() {
        isEncrypt = true;
        
        plaintextGroup.style.display = "block";
        ciphertextGroup.style.display = "none";
        
        plaintext.value = ""
        ciphertext.value = ""
      });

      document.querySelector("#decrypt-radio").addEventListener("change", function() {
        isEncrypt = false;
        
        plaintextGroup.style.display = "none";
        ciphertextGroup.style.display = "block";

        plaintext.value = ""
        ciphertext.value = ""
      });

      function getSelectedOptions(select) {
        var options = select.getElementsByTagName('option');
        for (var i = 0; i < options.length; i++) {
          if (options[i].selected)
            return options[i];
        };
      }

      var algoritme = {
        "Simple Vigenere Cipher": "vigenere",
        "Extended Vigenere Cipher": "extended",
        "Variant Vigenere Cipher": "variant",
        "Full Vigenere Cipher": "full",
        "Auto-key Vigenere Cipher": "autokey",
        "Super Cipher": "super",
        "Playfair Cipher": "playfair",
        "Hill Cipher": "hill",
        "Affine Cipher": "affine",
        "Enigma Cipher": "enigma"
      }

      var select = document.querySelector('#algoritme');
      var selectedOption = getSelectedOptions(select).text;

      document.querySelector("select").addEventListener("change", function() {
        selectedOption = getSelectedOptions(select).text;
      });

      function alphabetOnly(text) {
        return text.replace(/[^a-zA-Z]+/g, '')
      }

      document.querySelector("#plaintext").addEventListener("input", function() {
        plaintext.value = alphabetOnly(plaintext.value.toLowerCase());
        var selectedAlgo = algoritme[selectedOption]; 

        if (!selectedAlgo == "enigma") {
          plaintext.value = plaintext.value.toLowerCase();
        }
      })

      document.querySelector("#key").addEventListener("input", function() {
        key.value = alphabetOnly(key.value.toLowerCase());
      })

      document.querySelector(".btn").addEventListener("click", async function(event) {
        event.preventDefault();
        alert.style.display = "none";
        resultGroup.style.display = "none";

        var isValid = true;
        
        try {
          if (algoritme[selectedOption] == "hill") {
            if (key.value.length != 9) {
              isValid = false;
              alert.style.display = "block";
            } else {
              var data = await fetch(`/check/hill/${key.value}`)
              var result = await data.json();
              if (!result.data) {
                alert.style.display = "block";
                isValid = false;
              }
            }

          }
        } catch (err) {
          isValid = false;
        }

        if (isEncrypt && isValid) {
          fetch(`/encrypt/${algoritme[selectedOption]}/${plaintext.value}/${key.value}`)
            .then(async function(data) {
              var encryptedText = await data.json();

              resultGroup.style.display = "block";
              labelResult.innerHTML = "Hasil encrypt"
              textResult.value = encryptedText.data;
            })
            .catch(function(err) {
              console.error(err);
            })
        } else if (!isEncrypt && isValid) {
          fetch(`/decrypt/${algoritme[selectedOption]}/${ciphertext.value}/${key.value}`)
            .then(async function(data) {
              var decryptedText = await data.json();

              resultGroup.style.display = "block";
              labelResult.innerHTML = "Hasil decrypt"
              textResult.value = decryptedText.data;
            })
            .catch(function(err) {
              console.error(err);
            })
        }
      });

    script(src='https://code.jquery.com/jquery-3.4.1.slim.min.js' integrity='sha384-J6qa4849blE2+poT4WnyKhv5vZF5SrPo0iEjwBvKU7imGFAV0wwj1yYfoRSJoZ+n' crossorigin='anonymous')
    script(src='https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js' integrity='sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo' crossorigin='anonymous')
    script(src='https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js' integrity='sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6' crossorigin='anonymous')
